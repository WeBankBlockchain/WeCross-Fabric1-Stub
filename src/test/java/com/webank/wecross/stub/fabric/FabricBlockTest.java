package com.webank.wecross.stub.fabric;

import java.util.Base64;
import org.junit.Assert;
import org.junit.Test;

public class FabricBlockTest {

    public static final byte[] systemBlockBytes =
            Base64.getDecoder()
                    .decode(
                            "CkYIBRIg/AJVTB5Jo6PsxVf280oGYALnDeJU+3hB26V9NnMwl6YaIPxr0BLzo+ytoJJLflPDyJQe+Iqqh3uqBZQIYyOM/q8QEvsiCvgiCqwiCsAHCmgIAxABGgsIg8SM/wUQ8MSGQSIJbXljaGFubmVsKkAzNjFmY2ZhZWI0MzhmZGEzZmMzMDBkMTYwODg0ZjBlYmI4YjYxMjcxNWRjZDlhNzVjYzg3YWRlZGM0OWJhZWEwOggSBhIEbHNjYxLTBgq2BgoHT3JnMU1TUBKqBi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDS2pDQ0FkQ2dBd0lCQWdJUkFJNXBWT0FtNGFjcGNXaHphZnZzZHJnd0NnWUlLb1pJemowRUF3SXdjekVMCk1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaGJpQkcKY21GdVkybHpZMjh4R1RBWEJnTlZCQW9URUc5eVp6RXVaWGhoYlhCc1pTNWpiMjB4SERBYUJnTlZCQU1URTJOaApMbTl5WnpFdVpYaGhiWEJzWlM1amIyMHdIaGNOTWpBeE1qSXpNVEEwTmpBd1doY05NekF4TWpJeE1UQTBOakF3CldqQnJNUXN3Q1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU4KVTJGdUlFWnlZVzVqYVhOamJ6RU9NQXdHQTFVRUN4TUZZV1J0YVc0eEh6QWRCZ05WQkFNTUZrRmtiV2x1UUc5eQpaekV1WlhoaGJYQnNaUzVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFUVHNvYkJjMEdFCk5OTXNrV2dLbXcxOWROeTgraStUMW9CNDVnWkJpckZPVEZLRWd1b1JMNnZLZ3pPbVZmYTBNSE4ybHVWcXhKMHIKUzNRcW9wU25VeTRNbzAwd1N6QU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFIL0JBSXdBREFyQmdOVgpIU01FSkRBaWdDRGU0aHZaTThVQndadFBnUFpRRDJIKzRFb1pqclF1cTVkTkxqM2UxNWErWmpBS0JnZ3Foa2pPClBRUURBZ05JQURCRkFpRUF0MTRuUmhqL1Frb1dZMlJldkphcit6ZEJncFJabGY0Ly9DWjB3T2Nlc2p3Q0lHVlQKUjFmTFpJM3dZRVNiQTd5dUxpckVaQkRpNWw4MUpOckRRc2VFYTUzcAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIY4cqX4AzJh1WdX76HMLv3R4vmt7/IKQpCEuYaCuMaCtMGCrYGCgdPcmcxTVNQEqoGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNLakNDQWRDZ0F3SUJBZ0lSQUk1cFZPQW00YWNwY1doemFmdnNkcmd3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF4TWpJek1UQTBOakF3V2hjTk16QXhNakl4TVRBME5qQXcKV2pCck1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFT01Bd0dBMVVFQ3hNRllXUnRhVzR4SHpBZEJnTlZCQU1NRmtGa2JXbHVRRzl5Clp6RXVaWGhoYlhCc1pTNWpiMjB3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRUc29iQmMwR0UKTk5Nc2tXZ0ttdzE5ZE55OCtpK1Qxb0I0NWdaQmlyRk9URktFZ3VvUkw2dktnek9tVmZhME1ITjJsdVZxeEowcgpTM1Fxb3BTblV5NE1vMDB3U3pBT0JnTlZIUThCQWY4RUJBTUNCNEF3REFZRFZSMFRBUUgvQkFJd0FEQXJCZ05WCkhTTUVKREFpZ0NEZTRodlpNOFVCd1p0UGdQWlFEMkgrNEVvWmpyUXVxNWROTGozZTE1YStaakFLQmdncWhrak8KUFFRREFnTklBREJGQWlFQXQxNG5SaGovUWtvV1kyUmV2SmFyK3pkQmdwUlpsZjQvL0NaMHdPY2VzandDSUdWVApSMWZMWkkzd1lFU2JBN3l1TGlyRVpCRGk1bDgxSk5yRFFzZUVhNTNwCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhjhypfgDMmHVZ1fvocwu/dHi+a3v8gpCkISihQKngEKmwEKmAEIARIGEgRsc2NjGosBCgZkZXBsb3kKCW15Y2hhbm5lbAorCikIARIWCgljaGFpbmNvZGUSBHNhY2MaAzEuMBoNCgRpbml0CgFhCgIxMApJEhwSGggBEgwSCggBEgIIABICCAESCBIGCAESAggCGgsSCQoHT3JnMU1TUBoNEgsKB09yZzFNU1AQARoNEgsKB09yZzJNU1AQARLmEgrjBAog+EPl5AfioADe7ZozqMYyhHjJi9uMD6q9B6XG/DYKzpASvgQKqwISlQIKBGxzY2MSjAIKBgoEc2FjYxqBAgoEc2FjYxr4AQoEc2FjYxIDMS4wGgRlc2NjIgR2c2NjKkkSHBIaCAESDBIKCAESAggAEgIIARIIEgYIARICCAIaCxIJCgdPcmcxTVNQGg0SCwoHT3JnMU1TUBABGg0SCwoHT3JnMk1TUBABMkQKIFnQ0n2UiE5U1qq3QZhUkz1G1LWR/8EUe5c6W+Hy63FbEiBMlrXzgKrIbP3ccg2QO0PIDsT8usMh8EY3rlXlr0HfVTog4QBbK2OH4/YoYQlJtwUO8h8OdJO/mqFk6FmFft6pH3tCLBIMEgoIARICCAASAggBGg0SCwoHT3JnMU1TUBABGg0SCwoHT3JnMk1TUBABEhEKBHNhY2MSCRoHCgFhGgIxMBr+AQjIARr4AQoEc2FjYxIDMS4wGgRlc2NjIgR2c2NjKkkSHBIaCAESDBIKCAESAggAEgIIARIIEgYIARICCAIaCxIJCgdPcmcxTVNQGg0SCwoHT3JnMU1TUBABGg0SCwoHT3JnMk1TUBABMkQKIFnQ0n2UiE5U1qq3QZhUkz1G1LWR/8EUe5c6W+Hy63FbEiBMlrXzgKrIbP3ccg2QO0PIDsT8usMh8EY3rlXlr0HfVTog4QBbK2OH4/YoYQlJtwUO8h8OdJO/mqFk6FmFft6pH3tCLBIMEgoIARICCAASAggBGg0SCwoHT3JnMU1TUBABGg0SCwoHT3JnMk1TUBABIg0SBGxzY2MaBTEuNC40Ev0GCrIGCgdPcmcyTVNQEqYGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNKekNDQWM2Z0F3SUJBZ0lRZk5MZ1pnb05SWmQrTUIyNjBkWmZ2ekFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTWk1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NaTVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREV5TWpNeE1EUTJNREJhRncwek1ERXlNakV4TURRMk1EQmEKTUdveEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVEwd0N3WURWUVFMRXdSd1pXVnlNUjh3SFFZRFZRUURFeFp3WldWeU1DNXZjbWN5CkxtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVGeENpYlFaM1ZhYXoKTWhsMCtHWXEwdWxISG1OZllUVUhtMWxwUFBXK0JZcXRkMHltb1NsS1NoRjZCSmczbE8vTGZVeTBGd3RGRzlmQQp5MG1FbENZczBLTk5NRXN3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqCkJDUXdJb0FnSWZkMlR2eDE3UUZNQmdpUnpJNFMxUURtYU1PVzNjRWprY1JUZUZyakZYZ3dDZ1lJS29aSXpqMEUKQXdJRFJ3QXdSQUlnUm5uaUh3WG8zSzY2YzRldFk0NmFJeEFzTUVERXB6S0NJSnVyalpKSWJ0Z0NJQVYvMjFSYgpEWGRINFNlS00wQnlmUXphYzJhekJXVkJOZXF1a3kyeVUyankKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRjBEAiBlQtNg6834s7zf1dILDMLwjFSoiBmserjHtOijWR0MrgIgEZRizs6ZRkyxVpyh6GdYcyXSN0JXSY3eRnkqMnZxn9IS/QYKsgYKB09yZzFNU1ASpgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0p6Q0NBYzZnQXdJQkFnSVFaQlorUG9yV3RGL2JWSmQ0TXVnN1FEQUtCZ2dxaGtqT1BRUURBakJ6TVFzdwpDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5CllXNWphWE5qYnpFWk1CY0dBMVVFQ2hNUWIzSm5NUzVsZUdGdGNHeGxMbU52YlRFY01Cb0dBMVVFQXhNVFkyRXUKYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEFlRncweU1ERXlNak14TURRMk1EQmFGdzB6TURFeU1qRXhNRFEyTURCYQpNR294Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNUll3RkFZRFZRUUhFdzFUCllXNGdSbkpoYm1OcGMyTnZNUTB3Q3dZRFZRUUxFd1J3WldWeU1SOHdIUVlEVlFRREV4WndaV1Z5TUM1dmNtY3gKTG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRWJKbllxRytTWFNQQwpCeWJ5bEg2eDZjTnB3YTI3ZWFpWEdYNno3bjRqaGdJTWo2M1N3Q3FaZTE1YnlXS1BLNGNmNHJyM2xJejIxOVl6ClZRNU4yZTd3QktOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUNNQUF3S3dZRFZSMGoKQkNRd0lvQWczdUliMlRQRkFjR2JUNEQyVUE5aC91QktHWTYwTHF1WFRTNDkzdGVXdm1Zd0NnWUlLb1pJemowRQpBd0lEUndBd1JBSWdDWTREVlJ1Z2RkT2lpOWdKcUhDdVowdGxDQm5hYlhZUVN1Vml1YlR0dVhVQ0lBMjNoMFdaCkVnaSt2OHY4TlRpc3ZDYWdJN2xlODE5dmwvM2hFS1ZZWG5rMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChJGMEQCIBCUEarqSHqyb4OkXcvFbc7sDHR2WWDBs9NDYWM3zka0AiBVcc8u66K7u49nPa+OOIzM77g+u7bXg/EpowlvJUveuxJHMEUCIQCm+Oe/IcaKtZMVGyVEY+6gtS4YGZ0aZInbpS2IlujLmAIgAwx9fK5ipWI8hnUBDDig1NJtQFqh+VGjXCok2XsxxoQazQcKmwcKBAoCCAISkgcKxgYKqQYKCk9yZGVyZXJNU1ASmgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0hUQ0NBY1NnQXdJQkFnSVFCSXFHUnBobG5ScUNzbUF2Q0lVVjFEQUtCZ2dxaGtqT1BRUURBakJwTVFzdwpDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5CllXNWphWE5qYnpFVU1CSUdBMVVFQ2hNTFpYaGhiWEJzWlM1amIyMHhGekFWQmdOVkJBTVREbU5oTG1WNFlXMXcKYkdVdVkyOXRNQjRYRFRJd01USXlNekV3TkRZd01Gb1hEVE13TVRJeU1URXdORFl3TUZvd2FqRUxNQWtHQTFVRQpCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCR2NtRnVZMmx6ClkyOHhFREFPQmdOVkJBc1RCMjl5WkdWeVpYSXhIREFhQmdOVkJBTVRFMjl5WkdWeVpYSXVaWGhoYlhCc1pTNWoKYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFUREt4K2M3STFOR0VtdlNuUEdUUWpZR3dXaApLUzhIVjRoTFI3Qy8rMnBVZlJJdGU4WnhxbC9kam94b0IrS0J6N0dpd1ByNjBzQ1I3QnVQZWVIVitSNmtvMDB3ClN6QU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFIL0JBSXdBREFyQmdOVkhTTUVKREFpZ0NEVVI1cC8KWitLb0FsNCs1TnlIcWUwT2JjVCtaYWdaTHU0U3FsSEY5amhPYlRBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlBYgp4VC90akRWbzErdURoek5mb0xXaUttRFFXOW9rMUoyUnB6ZlhiUHcrYkFJZ2FCSTF4QWRQRUFtcmZac2gxMkRtCjVjQjdvdi9ZVU5aR0h1UkJ4MWZsd2FjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIYjp4IfdUNJbiZytbo1jNcB+QDTx+jhbTQEkcwRQIhANyNsvnLTepSAoGnHgvRtgtTYcl+cxseOcB0MqKY3v1tAiBRq6lxWAp/LVxdLNHP0xjcyPrmXOMrXbuDxUyNB6vLZQoECgIIAgoBAAoACiIKICcBZgr/1NCRyZxP1cqXq+H/6w+b4AaKZEvYRmB8Tu39");

    public static final byte[] blockBytes =
            Base64.getDecoder()
                    .decode(
                            "");

    @Test
    public void encodeSystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifySystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        boolean ok = block.verify(null, null);

        Assert.assertTrue(ok);
    }

    @Test
    public void encodeTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifyTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(null, null);

        Assert.assertTrue(ok);
    }
}
