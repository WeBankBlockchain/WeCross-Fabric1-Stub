package com.webank.wecross.stub.fabric;

import java.util.Base64;
import org.junit.Assert;
import org.junit.Test;

public class FabricBlockTest {

    public static final byte[] systemBlockBytes =
            Base64.getDecoder()
                    .decode(
                            "");
    public static final byte[] blockBytes =
            Base64.getDecoder()
                    .decode(
                            "CkYIBhIg59JF8CJ8ydOGRV1q7HIR5Hcg63LoNniiO39vtsTv/L0aICCr76vmKLZeTx2HwhtTuGckZjnYSNP42hz+47UKju6AEvAfCu0fCqIfCsgHCnAIAxABGgsIpuf5/wUQiJHdGyIJbXljaGFubmVsKkA4MDgyMzVjYzk0ODcwMjJjMWI5MjM1OTBmOWY5MTQ3NThiMGQ5NWYyNGNlNDk1MDlkYTZjNWQyNDcyMGRlMjhhOhASDhIMV2VDcm9zc1Byb3h5EtMGCrYGCgdPcmcxTVNQEqoGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNLVENDQWMrZ0F3SUJBZ0lRTnlMa1hISTcrcjhtWkFPYkpBZm9UVEFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNVEF4TVRNd05EQXlNREJhRncwek1UQXhNVEV3TkRBeU1EQmEKTUdzeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVE0d0RBWURWUVFMRXdWaFpHMXBiakVmTUIwR0ExVUVBd3dXUVdSdGFXNUFiM0puCk1TNWxlR0Z0Y0d4bExtTnZiVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCSGNrLzZrWUhjUTkKQkQvZi83VFM5TWZrWWp3UENMaFVXcXJ3ZGhGMm1xNFFzMU0rU2xIcHZiMHpFRUc3UDFaM0h0QXdCUjdvczdlWgo2SUdWKythT2VkQ2pUVEJMTUE0R0ExVWREd0VCL3dRRUF3SUhnREFNQmdOVkhSTUJBZjhFQWpBQU1Dc0dBMVVkCkl3UWtNQ0tBSUU1RzNhUm5CQ3VkS2FQQmdueVp5akcreHlMNXhud042a2lHZzMybW9QcGVNQW9HQ0NxR1NNNDkKQkFNQ0EwZ0FNRVVDSVFDSXFReE1ERCsydGEwcnVkUjEwdFY2Qzg5cEsrWWREaXFEU1dRNnNtc1Fud0lnV0tWdApKQ2FYQnlmV21MREVWdGkvK0E3ZFFCVVNDRmhnS1BaNkVod3ZiajA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhi527BFB72xHSzo/hiwrCpZL0u9aRVdIoYS1BcK0RcK0wYKtgYKB09yZzFNU1ASqgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0tUQ0NBYytnQXdJQkFnSVFOeUxrWEhJNytyOG1aQU9iSkFmb1RUQUtCZ2dxaGtqT1BRUURBakJ6TVFzdwpDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5CllXNWphWE5qYnpFWk1CY0dBMVVFQ2hNUWIzSm5NUzVsZUdGdGNHeGxMbU52YlRFY01Cb0dBMVVFQXhNVFkyRXUKYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEFlRncweU1UQXhNVE13TkRBeU1EQmFGdzB6TVRBeE1URXdOREF5TURCYQpNR3N4Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNUll3RkFZRFZRUUhFdzFUCllXNGdSbkpoYm1OcGMyTnZNUTR3REFZRFZRUUxFd1ZoWkcxcGJqRWZNQjBHQTFVRUF3d1dRV1J0YVc1QWIzSm4KTVM1bGVHRnRjR3hsTG1OdmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJIY2svNmtZSGNROQpCRC9mLzdUUzlNZmtZandQQ0xoVVdxcndkaEYybXE0UXMxTStTbEhwdmIwekVFRzdQMVozSHRBd0JSN29zN2VaCjZJR1YrK2FPZWRDalRUQkxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WSFJNQkFmOEVBakFBTUNzR0ExVWQKSXdRa01DS0FJRTVHM2FSbkJDdWRLYVBCZ255WnlqRyt4eUw1eG53TjZraUdnMzJtb1BwZU1Bb0dDQ3FHU000OQpCQU1DQTBnQU1FVUNJUUNJcVF4TUREKzJ0YTBydWRSMTB0VjZDODlwSytZZERpcURTV1E2c21zUW53SWdXS1Z0CkpDYVhCeWZXbUxERVZ0aS8rQTdkUUJVU0NGaGdLUFo2RWh3dmJqMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSGLnbsEUHvbEdLOj+GLCsKlkvS71pFV0ihhL4EAqDAQqAAQp+CAESDhIMV2VDcm9zc1Byb3h5GmoKD3NlbmRUcmFuc2FjdGlvbgogN2Q5NjQyOGZkNDYzNGQ0YzllMzgxNWY2ODZiM2IyOTgKATAKATAKHXBheW1lbnQuZmFicmljLW15Y2hhbm5lbC5zYWNjCgNzZXQKC1siYSIsIjEyMyJdEu8PCuIBCiAJ3XivHA/V2Tw82sswVQBzE51sPPApVy/duKFdeel2mxK9AQqUARJUCgxXZUNyb3NzUHJveHkSRAoiCiA3ZDk2NDI4ZmQ0NjM0ZDRjOWUzODE1ZjY4NmIzYjI5OAoNCgdDaGFubmVsEgIIAwoPCg1Db250cmFjdC1zYWNjEigKBGxzY2MSIAoSCgxXZUNyb3NzUHJveHkSAggDCgoKBHNhY2MSAggFEhIKBHNhY2MSChoICgFhGgMxMjMaCAjIARoDMTIzIhoSDFdlQ3Jvc3NQcm94eRoKMTYxMDUxMDg5ORKCBwq2BgoHT3JnMU1TUBKqBi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDS0RDQ0FjNmdBd0lCQWdJUVpxYmtlM0g2dTRvRXI4Q0sxVTJMWFRBS0JnZ3Foa2pPUFFRREFqQnpNUXN3CkNRWURWUVFHRXdKVlV6RVRNQkVHQTFVRUNCTUtRMkZzYVdadmNtNXBZVEVXTUJRR0ExVUVCeE1OVTJGdUlFWnkKWVc1amFYTmpiekVaTUJjR0ExVUVDaE1RYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEVjTUJvR0ExVUVBeE1UWTJFdQpiM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBeE1UTXdOREF5TURCYUZ3MHpNVEF4TVRFd05EQXlNREJhCk1Hb3hDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSEV3MVQKWVc0Z1JuSmhibU5wYzJOdk1RMHdDd1lEVlFRTEV3UndaV1Z5TVI4d0hRWURWUVFERXhad1pXVnlNQzV2Y21jeApMbVY0WVcxd2JHVXVZMjl0TUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFbGYrc0xIQ1liUFNaCmRwRGFGTEp3UTJUVnYxM2VhbzF2RHJJUHhPZXFPbHoza1htckhqNFNTZWZ4eUw4WCtPTFpraFp1bkQ0ajdYeWEKeGNmV3JaN3lMYU5OTUVzd0RnWURWUjBQQVFIL0JBUURBZ2VBTUF3R0ExVWRFd0VCL3dRQ01BQXdLd1lEVlIwagpCQ1F3SW9BZ1RrYmRwR2NFSzUwcG84R0NmSm5LTWI3SEl2bkdmQTNxU0lhRGZhYWcrbDR3Q2dZSUtvWkl6ajBFCkF3SURTQUF3UlFJaEFNdG5CNU1vNUFDdzdrM0pqamJ5aFRlV1RNRGgyVEd2U1VNcDBZS3IzRnlPQWlBM0pQTjAKc2tnUnIzRDRTQ3F3ZHdsV1NpNGRyVklxaXNVOURQeTU1aURTQWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChJHMEUCIQDbf277CbU950mVNPhP++atBko7qebj3Qqa05VEcuoWbQIgRraxJBAuoatl48U/6auyDJe7swroTOEI2RYjgZF2wPwSggcKtgYKB09yZzJNU1ASqgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0tEQ0NBYytnQXdJQkFnSVJBTEFoa3owQmVqckdwcHBZeEtwWUdpd3dDZ1lJS29aSXpqMEVBd0l3Y3pFTApNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFeEZqQVVCZ05WQkFjVERWTmhiaUJHCmNtRnVZMmx6WTI4eEdUQVhCZ05WQkFvVEVHOXlaekl1WlhoaGJYQnNaUzVqYjIweEhEQWFCZ05WQkFNVEUyTmgKTG05eVp6SXVaWGhoYlhCc1pTNWpiMjB3SGhjTk1qRXdNVEV6TURRd01qQXdXaGNOTXpFd01URXhNRFF3TWpBdwpXakJxTVFzd0NRWURWUVFHRXdKVlV6RVRNQkVHQTFVRUNCTUtRMkZzYVdadmNtNXBZVEVXTUJRR0ExVUVCeE1OClUyRnVJRVp5WVc1amFYTmpiekVOTUFzR0ExVUVDeE1FY0dWbGNqRWZNQjBHQTFVRUF4TVdjR1ZsY2pBdWIzSm4KTWk1bGVHRnRjR3hsTG1OdmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJKV1lXNXJqdGRrago5TGlMd2VtY1NQRG0vQ3dMdndvLy9oYVU2dlIzWTd5bEt0Z09WR2t4OEJsS3BCRzdyS1FlMDYxRlBnSDBZVjMzCnpVampOUkVJL2dPalRUQkxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WSFJNQkFmOEVBakFBTUNzR0ExVWQKSXdRa01DS0FJSEZPb2pFNlkxUURzWnVHY2k5Y2Nadm5mWEhXYnBjeXJIbVV4V3hTVlNOTk1Bb0dDQ3FHU000OQpCQU1DQTBjQU1FUUNJRmlDK1VkZ0pIazBXVkFJT2JxdlFhR202WUlnRk1aQjdib3cyTWhEU0VMT0FpQS9LT040Cnlhc2NFR0JtVE1QWmgvRHlFN2FxcWZSRUFlZWhyTUFOYTVvNVFRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRzBFAiEA/cppDxfdktmTVn2GXtE8p+bFYQC+HDW4GFk1ijT0ORMCIGJ+zMF4QJo1ytr9gjJnqbCUbX3nMoFucXbJDz7heZ4KEkYwRAIgM3/GQOYgoi4VYEQsol4Cw3hH3Nwcz0paPWpbxJvmdt8CICfo0lq5PVxW/UA/cvecXPanUz5GXZriyeVseysfVyGbGs0HCpsHCgQKAggCEpIHCsYGCqkGCgpPcmRlcmVyTVNQEpoGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNIakNDQWNXZ0F3SUJBZ0lSQUxhMHcrUGVDODlSa1M3U0RBRTkyN2d3Q2dZSUtvWkl6ajBFQXdJd2FURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMlY0WVcxd2JHVXVZMjl0TVJjd0ZRWURWUVFERXc1allTNWxlR0Z0CmNHeGxMbU52YlRBZUZ3MHlNVEF4TVRNd05EQXlNREJhRncwek1UQXhNVEV3TkRBeU1EQmFNR294Q3pBSkJnTlYKQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcApjMk52TVJBd0RnWURWUVFMRXdkdmNtUmxjbVZ5TVJ3d0dnWURWUVFERXhOdmNtUmxjbVZ5TG1WNFlXMXdiR1V1ClkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVubTJrdnFqbnFETG9POTVFREZEdGpBTmoKdTE0TFlnVEdBZ0t5QWppby8zc0V5UHpHcU5NMkVGbzRZcGdUYnh4eGNSUDVkcWpaemhMdGo0YUtNZDlUVWFOTgpNRXN3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWd1RTFmCmR5YWJpSndaYjhWMmo0TnFiL3psRTVRL1crVlk2aFBRdGhHTkRBUXdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWcKYWsvWURXM29KSERSWUdnZGNYWWN2VVB1cGlpeEEzTFFNa01yY290VGY1a0NJREFBSVJHYzh5TE1oczZnOEdxcgpSdmtrMVhjTS96bjZXb29uWmlwZ0lTSmQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSGKi1PiS0UolErCWCAOA+gIQthz+/Y9dGnhJHMEUCIQCtzuQQB0in1DweQxJlZf9Hz5+/BAF/My0hOYdOWzeO9AIgBgDQAoQMR9cS7Svn404bHOvSTIv0wo6I/ZaGBMqZqewKBAoCCAIKAQAKAAoiCiC4iUo58DRLylCgU2vresl/gbiAHobaGbT1InfApGwd5g==");

    public static final String blockVerifier =
            "{\"chainType\":\"Fabric1.4\",\"endorserCA\":{\"Org2MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUDCCAfegAwIBAgIQaLIllL5VO61suGEpg4cDqjAKBggqhkjOPQQDAjBzMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMTAxMTMwNDAyMDBaFw0zMTAxMTEwNDAyMDBa\\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\nV6iUML0wdJW1p/4LlyZ1jv82wi+NCxFmTl3sFT8YXJc7qVKwjdOJ9hhMUDocH3vv\\nC0FQX2TUFSTXkIq/D6cWeqNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCBx\\nTqIxOmNUA7GbhnIvXHGb531x1m6XMqx5lMVsUlUjTTAKBggqhkjOPQQDAgNHADBE\\nAiA4S7gz3PVLZnlCVpEiX3f+qAHDVQ+2V65dzbiWoOgLKAIgFaQXZudlboJ+eyhc\\nwhYOBMTMP1sR2hJg0122zjTw0YQ=\\n-----END CERTIFICATE-----\\n\",\"Org1MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUjCCAfigAwIBAgIRAIbOVY1BPkNA4A5rRV7eTRwwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTEzMDQwMjAwWhcNMzEwMTExMDQwMjAw\\nWjBzMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UE\\nAxMTY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBLxOEvLksFn3CkckVmmHyHWBlwnpCnSCRrrLjDxRNQ6Yav39j8qGxpOMQ6IQYUJ1\\nKcTrgocHRuU9Gp4KbeeDj8ijbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAU\\nBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg\\nTkbdpGcEK50po8GCfJnKMb7HIvnGfA3qSIaDfaag+l4wCgYIKoZIzj0EAwIDSAAw\\nRQIhAJ4OBWcxNSh5ZN4la5xVAS5vh297LK0OxSENafpbtHHsAiBtp5J5oZc/qmut\\n6CvU62duWZP5BMZvj76eVsJ1z7R9dg==\\n-----END CERTIFICATE-----\\n\"},\"ordererCA\":{\"OrdererMSP\":\"-----BEGIN CERTIFICATE-----\\nMIICPDCCAeOgAwIBAgIQL1Y7yX9JeOXnijnN+WpbuTAKBggqhkjOPQQDAjBpMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1w\\nbGUuY29tMB4XDTIxMDExMzA0MDIwMFoXDTMxMDExMTA0MDIwMFowaTELMAkGA1UE\\nBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz\\nY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFtcGxlLmNv\\nbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABI3wYgmDhTxl1S7Ox7wj38N3fuN6\\npNiNUKs6FBLzJ5EmYwHNrl8i38yiQ6Sa+sCrHoNdd8YKDwG08Na4DlrgR2CjbTBr\\nMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEw\\nDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQguE1fdyabiJwZb8V2j4Nqb/zlE5Q/\\nW+VY6hPQthGNDAQwCgYIKoZIzj0EAwIDRwAwRAIgb89YhlRKHzp+sdo1lo2o2Ytb\\nYwZx/rSXddx3epTAaR4CIFlDniu436uojqA6MNZccVWur1v5Ge6+x+pEgwdq/C43\\n-----END CERTIFICATE-----\\n\"}}";
    public static final String wrongBlockVerifier =
            "{\"chainType\":\"Fabric1.4\",\"endorserCA\":{\"Org1MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUDCCAfegAwIBAgIQJmyvCanC7043ZFfINL2btzAKBggqhkjOPQQDAjBzMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMTAxMTExMDQyMDBaFw0zMTAxMDkxMDQyMDBa\\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\nkLhh6ApJawsZqed22N7yRfD8AnUBXpkeMl1r4Irh0js2oC2yA2S5Fjmi+CCFLcvi\\nEkiulOuiFIqSmolDPpIM26NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDR\\nayfFN90fQwisDKjHf/4ixNDVEssTnWrnhid+hjWuGjAKBggqhkjOPQQDAgNHADBE\\nAiBGMNHQuga/y+PSneWzGGcNYBwWjO3x9VSmpRLOAA/RQwIgaUMTX/YKx28FXHou\\nv3ImYHImiBAwgWpnEXg/Wyq1SHA=\\n-----END CERTIFICATE-----\\n\",\"Org2MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUjCCAfigAwIBAgIRAOos+vF1ZqSCxsuT0eL3gCcwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTExMTA0MjAwWhcNMzEwMTA5MTA0MjAw\\nWjBzMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UE\\nAxMTY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBH1pHEyeS2MInYwPK16rmwzCSEiGyXM87pLcZRuU/ih1ch4hJivBurD5yXh2HIdD\\nO2mvpnK8JqcU7KWcga8QApCjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAU\\nBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg\\n7sbed1KYSCzLrilSj315CRL3FwR3fhw1hhobR3fBj+4wCgYIKoZIzj0EAwIDSAAw\\nRQIhAMW2Tz34wNX/sxdn4iHvw0VQ1mNWN6FyHQkswS7q3aUQAiBbY7chRM2YPoTo\\n3Z+btoRYxe9CtLMB8198k/TV6RgXOA==\\n-----END CERTIFICATE-----\\n\"},\"ordererCA\":{\"OrdererMSP\":\"-----BEGIN CERTIFICATE-----\\nMIICPDCCAeOgAwIBAgIQPVgCVOIQvz1No7lkTQnTYjAKBggqhkjOPQQDAjBpMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1w\\nbGUuY29tMB4XDTIxMDExMTEwNDIwMFoXDTMxMDEwOTEwNDIwMFowaTELMAkGA1UE\\nBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz\\nY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFtcGxlLmNv\\nbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBDsaRjMA15CkelvS3hKE3elonTX\\nIJeyvJFKiTZN3MoiskpwYygWCPg6EL+b1RGLDE7pLCY8o47hKLzM3k/C69yjbTBr\\nMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEw\\nDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQgS3Pz+PzOmeuU0AezevNdxx+l4H4g\\nVWBOPvOwTDu0n0wwCgYIKoZIzj0EAwIDRwAwRAIgOQnksqjpoXl+aLH56bMxbyP7\\nLvmiRHAr/EbDVe6eADQCIH5KZO+nKWxNz9WnaNUR2prpKNYlfxWav2DNccVgYeiz\\n-----END CERTIFICATE-----\\n\"}}";

    @Test
    public void encodeSystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifySystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        boolean ok = block.verify(blockVerifier);

        Assert.assertTrue(ok);
    }

    @Test
    public void encodeTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifyTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(blockVerifier);

        Assert.assertTrue(ok);
    }

    @Test
    public void verifyNullTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(null);
        Assert.assertFalse(ok);
    }

    @Test
    public void verifyFailTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(wrongBlockVerifier);
        Assert.assertFalse(ok);
    }
}
