package com.webank.wecross.stub.fabric;

import java.util.Base64;
import org.junit.Assert;
import org.junit.Test;

public class FabricBlockTest {

    public static final byte[] systemBlockBytes =
            Base64.getDecoder()
                    .decode(
                            "");

    public static final byte[] blockBytes =
            Base64.getDecoder()
                    .decode(
                            "CkYIBxIgdAJlk+qGYZtqv4WyeI6bjyaCQcNsjId81jJE02k0TT8aIEHZvx6OssLYKLjAWxxsz455Nv7lnVb/MEaT2WpTcdFIEvAfCu0fCqEfCskHCnEIAxABGgwI1efw/wUQuJKeswMiCW15Y2hhbm5lbCpAZjQ4MGJkMzkwN2I4Mjk2NzcxOWI0ZWZhMTZmM2E0MzFiODQ4YmE2MWFmOTBiYjhhNzkwYmE0MDk3MDVmYmY4OToQEg4SDFdlQ3Jvc3NQcm94eRLTBgq2BgoHT3JnMU1TUBKqBi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDS0RDQ0FjK2dBd0lCQWdJUUFkOVZNRU5yQ1g5eERvSDNoVHNncHpBS0JnZ3Foa2pPUFFRREFqQnpNUXN3CkNRWURWUVFHRXdKVlV6RVRNQkVHQTFVRUNCTUtRMkZzYVdadmNtNXBZVEVXTUJRR0ExVUVCeE1OVTJGdUlFWnkKWVc1amFYTmpiekVaTUJjR0ExVUVDaE1RYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEVjTUJvR0ExVUVBeE1UWTJFdQpiM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBeE1URXhNRFF5TURCYUZ3MHpNVEF4TURreE1EUXlNREJhCk1Hc3hDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSEV3MVQKWVc0Z1JuSmhibU5wYzJOdk1RNHdEQVlEVlFRTEV3VmhaRzFwYmpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbgpNUzVsZUdGdGNHeGxMbU52YlRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQlBEV0tRL3Y5RHlaCkQxMjZBKzFreWEvT1JhTVgzT2wrelhuZWhQL2hLMTN6RGNZOVgydytEQVdyOWdNWTJHaGhsa2F0R2pITWNUdjAKdk5iaVRERkpUWUtqVFRCTE1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZApJd1FrTUNLQUlPN0czbmRTbUVnc3k2NHBVbzk5ZVFrUzl4Y0VkMzRjTllZYUcwZDN3WS91TUFvR0NDcUdTTTQ5CkJBTUNBMGNBTUVRQ0lEbDNVK0hGODVqM25GeWNyaTlJUWo5emdDODA3Z1owMXlGVkkzM2RsUW9yQWlCeWhJQ1gKK3NvWHE3a0doVWxCUjhuZmFTdUVUVThvcGFaaUQ2dUlJYUVIMFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIYN/oCF3Q2L5D0zuOfGZOvYmSj/mB4++6VEtIXCs8XCtMGCrYGCgdPcmcxTVNQEqoGLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNLRENDQWMrZ0F3SUJBZ0lRQWQ5Vk1FTnJDWDl4RG9IM2hUc2dwekFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNVEF4TVRFeE1EUXlNREJhRncwek1UQXhNRGt4TURReU1EQmEKTUdzeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVE0d0RBWURWUVFMRXdWaFpHMXBiakVmTUIwR0ExVUVBd3dXUVdSdGFXNUFiM0puCk1TNWxlR0Z0Y0d4bExtTnZiVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCUERXS1EvdjlEeVoKRDEyNkErMWt5YS9PUmFNWDNPbCt6WG5laFAvaEsxM3pEY1k5WDJ3K0RBV3I5Z01ZMkdoaGxrYXRHakhNY1R2MAp2TmJpVERGSlRZS2pUVEJMTUE0R0ExVWREd0VCL3dRRUF3SUhnREFNQmdOVkhSTUJBZjhFQWpBQU1Dc0dBMVVkCkl3UWtNQ0tBSU83RzNuZFNtRWdzeTY0cFVvOTllUWtTOXhjRWQzNGNOWVlhRzBkM3dZL3VNQW9HQ0NxR1NNNDkKQkFNQ0EwY0FNRVFDSURsM1UrSEY4NWozbkZ5Y3JpOUlRajl6Z0M4MDdnWjAxeUZWSTMzZGxRb3JBaUJ5aElDWAorc29YcTdrR2hVbEJSOG5mYVN1RVRVOG9wYVppRDZ1SUlhRUgwUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhg3+gIXdDYvkPTO458Zk69iZKP+YHj77pUS9hAKgwEKgAEKfggBEg4SDFdlQ3Jvc3NQcm94eRpqCg9zZW5kVHJhbnNhY3Rpb24KIDFjZDc3NjNjNjgyYzQ1NTNhYzU1MWY1YjY2NDI0YmMwCgEwCgEwCh1wYXltZW50LmZhYnJpYy1teWNoYW5uZWwuc2FjYwoDc2V0CgtbImEiLCIzMjEiXRLtDwriAQog490I2LzBJwZOt6CMoh/kshoOuFyeqm2qNE7v6iGUZoASvQEKlAESVAoMV2VDcm9zc1Byb3h5EkQKIgogMWNkNzc2M2M2ODJjNDU1M2FjNTUxZjViNjY0MjRiYzAKDQoHQ2hhbm5lbBICCAMKDwoNQ29udHJhY3Qtc2FjYxIoCgRsc2NjEiAKEgoMV2VDcm9zc1Byb3h5EgIIAwoKCgRzYWNjEgIIBRISCgRzYWNjEgoaCAoBYRoDMzIxGggIyAEaAzMyMSIaEgxXZUNyb3NzUHJveHkaCjE2MTAzNjIwODASgQcKtgYKB09yZzFNU1ASqgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0tEQ0NBYzZnQXdJQkFnSVFZWXoxcUFuT0x6V1MxMWFvQ0diWkxEQUtCZ2dxaGtqT1BRUURBakJ6TVFzdwpDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5CllXNWphWE5qYnpFWk1CY0dBMVVFQ2hNUWIzSm5NUzVsZUdGdGNHeGxMbU52YlRFY01Cb0dBMVVFQXhNVFkyRXUKYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEFlRncweU1UQXhNVEV4TURReU1EQmFGdzB6TVRBeE1Ea3hNRFF5TURCYQpNR294Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNUll3RkFZRFZRUUhFdzFUCllXNGdSbkpoYm1OcGMyTnZNUTB3Q3dZRFZRUUxFd1J3WldWeU1SOHdIUVlEVlFRREV4WndaV1Z5TUM1dmNtY3gKTG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRWw4RldTbmREU0E2WApMdHI1STVROFJXaUczMGdNellvSFZ4OTR4S1Fma0I3R2hJUDY1RGVJNnRGQm9zMVJsV1FMVVdhdU14T3lORytBCjJMUGpWYjZkYXFOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUNNQUF3S3dZRFZSMGoKQkNRd0lvQWc3c2JlZDFLWVNDekxyaWxTajMxNUNSTDNGd1IzZmh3MWhob2JSM2ZCais0d0NnWUlLb1pJemowRQpBd0lEU0FBd1JRSWhBSk8zbWdFQUE5S0NRdHZxUm1BSUk3QXY2Ri9WdFBzSXFpN1pRZmk5Y2FsM0FpQThiMUxjCk0zWGZMR1l2OXV1bHFhbGlka3VKR0lUUkMvOUQ0WmRyOTY0SlZ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRjBEAiBVbfQ5YQIdZqoN43rp3qtf+dP3h94KS9QvrMXHhi0DMgIgFNEUw7bi3ctKBMmCDgsCy5tBlNOulEG6P1JNuprGIt0SgQcKtgYKB09yZzJNU1ASqgYtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0tEQ0NBYzZnQXdJQkFnSVFkZzEyKy9sbi8rbnhZTnhmL01NaDBqQUtCZ2dxaGtqT1BRUURBakJ6TVFzdwpDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5CllXNWphWE5qYnpFWk1CY0dBMVVFQ2hNUWIzSm5NaTVsZUdGdGNHeGxMbU52YlRFY01Cb0dBMVVFQXhNVFkyRXUKYjNKbk1pNWxlR0Z0Y0d4bExtTnZiVEFlRncweU1UQXhNVEV4TURReU1EQmFGdzB6TVRBeE1Ea3hNRFF5TURCYQpNR294Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNUll3RkFZRFZRUUhFdzFUCllXNGdSbkpoYm1OcGMyTnZNUTB3Q3dZRFZRUUxFd1J3WldWeU1SOHdIUVlEVlFRREV4WndaV1Z5TUM1dmNtY3kKTG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU9jb3BKM1NTWXF3bAp0TjRhZnpiYzd4QnIwY1pGVXVjdnIwYlR3WTBNNWxUUGRWcnVqVWJ6VytrUWdpRGQ0TUxFL1psakdSTmFjNzQ1CkJQMnFtRldNZXFOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUNNQUF3S3dZRFZSMGoKQkNRd0lvQWcwV3NueFRmZEgwTUlyQXlveDMvK0lzVFExUkxMRTUxcTU0WW5mb1kxcmhvd0NnWUlLb1pJemowRQpBd0lEU0FBd1JRSWhBSkVlSm9nSkV5bGxMSjV1bUFjWm9CNnU5d2E3dzJWQWJtSzZQWWE0aUFlZEFpQXFSZkdqCnBaeExOVnFCWmwrenBSVVoxdytQK0QwMThUclN4NUE0SlFMUmhBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRjBEAiAOLQMKjMD220F6LxAbbfyM7S87INpY/SKLoesCpcUwIQIgQT3RS0bLnXtFsQSn8a8pbmkrG73Wfr9iqeFlsm8uOtgSRzBFAiEA58M6/tazs1Tp3xwt9EnpUL+RrGQa4Df9+t8UqNCky78CIBgr1hAya0OEB5TuCg8EUSaX6kKGZPgulZpoYfI/tHH2GtAHCp4HCgQKAggCEpUHCsoGCq0GCgpPcmRlcmVyTVNQEp4GLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNIekNDQWNXZ0F3SUJBZ0lSQUtzWGlMSWhOT2o0VUpZeFM3ZUFTbDh3Q2dZSUtvWkl6ajBFQXdJd2FURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMlY0WVcxd2JHVXVZMjl0TVJjd0ZRWURWUVFERXc1allTNWxlR0Z0CmNHeGxMbU52YlRBZUZ3MHlNVEF4TVRFeE1EUXlNREJhRncwek1UQXhNRGt4TURReU1EQmFNR294Q3pBSkJnTlYKQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcApjMk52TVJBd0RnWURWUVFMRXdkdmNtUmxjbVZ5TVJ3d0dnWURWUVFERXhOdmNtUmxjbVZ5TG1WNFlXMXdiR1V1ClkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVlWllxQWlSSWZpYmRyVHdhWjh5M0NCdkgKcnBiRFZxZ2M3bVVyeW90UVc1MFJCaGc3UllwZENaSXdiYmdKNkk5WENiZG9kRmhoS0cwSmlFQTlSMzlPaWFOTgpNRXN3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWdTM1B6CitQek9tZXVVMEFlemV2TmR4eCtsNEg0Z1ZXQk9Qdk93VER1MG4wd3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWgKQVBYcGVQSUxpTjZxYkY4d2xLOUk3dFJrSU1MNjcxUHpMUjc5enFnT3FGdVhBaUJzU2dQTmoyYWwvdWMzS2lFdAo4dVZqeEQwdGZBNTArdDh3aVJkR3lWZzc5dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhhszypMDSLuQbiJMdXfuVy0SpBOvH1BzCYSRjBEAiBAlXKSRqID7oqV0fsV6rLEhu1XgSZij+95FnH3EiUHxAIgFXwwNX1jCTGtgDShJD+oW/iku95s5+KLMjCHhyn9Q64KBAoCCAIKAQAKAAoiCiB0XjZXLm1EERuzsDIf2QP5p7hnFCFSO+WcOuJsNxm0yA==");

    public static final String blockVerifier =
            "{\"chainType\":\"Fabric1.4\",\"endorserCA\":{\"Org2MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUDCCAfegAwIBAgIQJmyvCanC7043ZFfINL2btzAKBggqhkjOPQQDAjBzMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMTAxMTExMDQyMDBaFw0zMTAxMDkxMDQyMDBa\\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\nkLhh6ApJawsZqed22N7yRfD8AnUBXpkeMl1r4Irh0js2oC2yA2S5Fjmi+CCFLcvi\\nEkiulOuiFIqSmolDPpIM26NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDR\\nayfFN90fQwisDKjHf/4ixNDVEssTnWrnhid+hjWuGjAKBggqhkjOPQQDAgNHADBE\\nAiBGMNHQuga/y+PSneWzGGcNYBwWjO3x9VSmpRLOAA/RQwIgaUMTX/YKx28FXHou\\nv3ImYHImiBAwgWpnEXg/Wyq1SHA=\\n-----END CERTIFICATE-----\\n\",\"Org1MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUjCCAfigAwIBAgIRAOos+vF1ZqSCxsuT0eL3gCcwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTExMTA0MjAwWhcNMzEwMTA5MTA0MjAw\\nWjBzMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UE\\nAxMTY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBH1pHEyeS2MInYwPK16rmwzCSEiGyXM87pLcZRuU/ih1ch4hJivBurD5yXh2HIdD\\nO2mvpnK8JqcU7KWcga8QApCjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAU\\nBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg\\n7sbed1KYSCzLrilSj315CRL3FwR3fhw1hhobR3fBj+4wCgYIKoZIzj0EAwIDSAAw\\nRQIhAMW2Tz34wNX/sxdn4iHvw0VQ1mNWN6FyHQkswS7q3aUQAiBbY7chRM2YPoTo\\n3Z+btoRYxe9CtLMB8198k/TV6RgXOA==\\n-----END CERTIFICATE-----\\n\"},\"ordererCA\":{\"OrdererMSP\":\"-----BEGIN CERTIFICATE-----\\nMIICPDCCAeOgAwIBAgIQPVgCVOIQvz1No7lkTQnTYjAKBggqhkjOPQQDAjBpMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1w\\nbGUuY29tMB4XDTIxMDExMTEwNDIwMFoXDTMxMDEwOTEwNDIwMFowaTELMAkGA1UE\\nBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz\\nY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFtcGxlLmNv\\nbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBDsaRjMA15CkelvS3hKE3elonTX\\nIJeyvJFKiTZN3MoiskpwYygWCPg6EL+b1RGLDE7pLCY8o47hKLzM3k/C69yjbTBr\\nMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEw\\nDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQgS3Pz+PzOmeuU0AezevNdxx+l4H4g\\nVWBOPvOwTDu0n0wwCgYIKoZIzj0EAwIDRwAwRAIgOQnksqjpoXl+aLH56bMxbyP7\\nLvmiRHAr/EbDVe6eADQCIH5KZO+nKWxNz9WnaNUR2prpKNYlfxWav2DNccVgYeiz\\n-----END CERTIFICATE-----\\n\"}}";

    public static final String wrongBlockVerifier =
            "{\"chainType\":\"Fabric1.4\",\"endorserCA\":{\"Org1MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUDCCAfegAwIBAgIQJmyvCanC7043ZFfINL2btzAKBggqhkjOPQQDAjBzMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMTAxMTExMDQyMDBaFw0zMTAxMDkxMDQyMDBa\\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\nkLhh6ApJawsZqed22N7yRfD8AnUBXpkeMl1r4Irh0js2oC2yA2S5Fjmi+CCFLcvi\\nEkiulOuiFIqSmolDPpIM26NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDR\\nayfFN90fQwisDKjHf/4ixNDVEssTnWrnhid+hjWuGjAKBggqhkjOPQQDAgNHADBE\\nAiBGMNHQuga/y+PSneWzGGcNYBwWjO3x9VSmpRLOAA/RQwIgaUMTX/YKx28FXHou\\nv3ImYHImiBAwgWpnEXg/Wyq1SHA=\\n-----END CERTIFICATE-----\\n\",\"Org2MSP\":\"-----BEGIN CERTIFICATE-----\\nMIICUjCCAfigAwIBAgIRAOos+vF1ZqSCxsuT0eL3gCcwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjEwMTExMTA0MjAwWhcNMzEwMTA5MTA0MjAw\\nWjBzMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UE\\nAxMTY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBH1pHEyeS2MInYwPK16rmwzCSEiGyXM87pLcZRuU/ih1ch4hJivBurD5yXh2HIdD\\nO2mvpnK8JqcU7KWcga8QApCjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAU\\nBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg\\n7sbed1KYSCzLrilSj315CRL3FwR3fhw1hhobR3fBj+4wCgYIKoZIzj0EAwIDSAAw\\nRQIhAMW2Tz34wNX/sxdn4iHvw0VQ1mNWN6FyHQkswS7q3aUQAiBbY7chRM2YPoTo\\n3Z+btoRYxe9CtLMB8198k/TV6RgXOA==\\n-----END CERTIFICATE-----\\n\"},\"ordererCA\":{\"OrdererMSP\":\"-----BEGIN CERTIFICATE-----\\nMIICPDCCAeOgAwIBAgIQPVgCVOIQvz1No7lkTQnTYjAKBggqhkjOPQQDAjBpMQsw\\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1w\\nbGUuY29tMB4XDTIxMDExMTEwNDIwMFoXDTMxMDEwOTEwNDIwMFowaTELMAkGA1UE\\nBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz\\nY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFtcGxlLmNv\\nbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBDsaRjMA15CkelvS3hKE3elonTX\\nIJeyvJFKiTZN3MoiskpwYygWCPg6EL+b1RGLDE7pLCY8o47hKLzM3k/C69yjbTBr\\nMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEw\\nDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQgS3Pz+PzOmeuU0AezevNdxx+l4H4g\\nVWBOPvOwTDu0n0wwCgYIKoZIzj0EAwIDRwAwRAIgOQnksqjpoXl+aLH56bMxbyP7\\nLvmiRHAr/EbDVe6eADQCIH5KZO+nKWxNz9WnaNUR2prpKNYlfxWav2DNccVgYeiz\\n-----END CERTIFICATE-----\\n\"}}";

    @Test
    public void encodeSystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifySystemTest() throws Exception {
        FabricBlock block = FabricBlock.encode(systemBlockBytes);
        boolean ok = block.verify(blockVerifier);

        Assert.assertTrue(ok);
    }

    @Test
    public void encodeTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        block.getValidTxs();
        Assert.assertTrue(true); // if no throw
    }

    @Test
    public void verifyTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(blockVerifier);

        Assert.assertTrue(ok);
    }

    @Test
    public void verifyNullTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(null);
        Assert.assertFalse(ok);
    }

    @Test
    public void verifyFailTest() throws Exception {
        FabricBlock block = FabricBlock.encode(blockBytes);
        boolean ok = block.verify(wrongBlockVerifier);
        Assert.assertFalse(ok);
    }
}
